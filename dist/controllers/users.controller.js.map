{"version":3,"sources":["../../src/controllers/users.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { LoginUserDto } from '@dtos/users.dto';\nimport { User } from '@interfaces/users.interface';\nimport userService from '@services/users.service';\n\nclass UsersController {\n  public userService = new userService();\n\n  public getUsers = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const findAllUsersData: User[] = await this.userService.findAllUser();\n\n      res.status(200).json({ data: findAllUsersData, message: 'findAll' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public getUserById = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const userId: string = req.params.id;\n      const findOneUserData: User = await this.userService.findUserById(userId);\n\n      res.status(200).json({ data: findOneUserData, message: 'findOne' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public createUser = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const userData: LoginUserDto = req.body;\n      const createUserData: User = await this.userService.createUser(userData);\n\n      res.status(201).json({ data: createUserData, message: 'created' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public updateUser = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const userId: string = req.params.id;\n      const userData: LoginUserDto = req.body;\n      const updateUserData: User = await this.userService.updateUser(userId, userData);\n\n      res.status(200).json({ data: updateUserData, message: 'updated' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public deleteUser = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const userId: string = req.params.id;\n      const deleteUserData: User = await this.userService.deleteUser(userId);\n\n      res.status(200).json({ data: deleteUserData, message: 'deleted' });\n    } catch (error) {\n      next(error);\n    }\n  };\n}\n\nexport default UsersController;\n"],"names":["UsersController","userService","getUsers","req","res","next","findAllUsersData","findAllUser","status","json","data","message","error","getUserById","userId","params","id","findOneUserData","findUserById","createUser","userData","body","createUserData","updateUser","updateUserData","deleteUser","deleteUserData"],"mappings":";;;;+BAgEA;;aAAA;;qDA7DwB;;;;;;AAExB,IAAA,AAAMA,kBAAN,MAAMA;;aACGC,cAAc,IAAIA,qBAAW;aAE7BC,WAAW,OAAOC,KAAcC,KAAeC,OAAuB;YAC3E,IAAI;gBACF,MAAMC,mBAA2B,MAAM,IAAI,CAACL,WAAW,CAACM,WAAW;gBAEnEH,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMJ;oBAAkBK,SAAS;gBAAU;YACpE,EAAE,OAAOC,OAAO;gBACdP,KAAKO;YACP;QACF;aAEOC,cAAc,OAAOV,KAAcC,KAAeC,OAAuB;YAC9E,IAAI;gBACF,MAAMS,SAAiBX,IAAIY,MAAM,CAACC,EAAE;gBACpC,MAAMC,kBAAwB,MAAM,IAAI,CAAChB,WAAW,CAACiB,YAAY,CAACJ;gBAElEV,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMO;oBAAiBN,SAAS;gBAAU;YACnE,EAAE,OAAOC,OAAO;gBACdP,KAAKO;YACP;QACF;aAEOO,aAAa,OAAOhB,KAAcC,KAAeC,OAAuB;YAC7E,IAAI;gBACF,MAAMe,WAAyBjB,IAAIkB,IAAI;gBACvC,MAAMC,iBAAuB,MAAM,IAAI,CAACrB,WAAW,CAACkB,UAAU,CAACC;gBAE/DhB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMY;oBAAgBX,SAAS;gBAAU;YAClE,EAAE,OAAOC,OAAO;gBACdP,KAAKO;YACP;QACF;aAEOW,aAAa,OAAOpB,KAAcC,KAAeC,OAAuB;YAC7E,IAAI;gBACF,MAAMS,SAAiBX,IAAIY,MAAM,CAACC,EAAE;gBACpC,MAAMI,WAAyBjB,IAAIkB,IAAI;gBACvC,MAAMG,iBAAuB,MAAM,IAAI,CAACvB,WAAW,CAACsB,UAAU,CAACT,QAAQM;gBAEvEhB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMc;oBAAgBb,SAAS;gBAAU;YAClE,EAAE,OAAOC,OAAO;gBACdP,KAAKO;YACP;QACF;aAEOa,aAAa,OAAOtB,KAAcC,KAAeC,OAAuB;YAC7E,IAAI;gBACF,MAAMS,SAAiBX,IAAIY,MAAM,CAACC,EAAE;gBACpC,MAAMU,iBAAuB,MAAM,IAAI,CAACzB,WAAW,CAACwB,UAAU,CAACX;gBAE/DV,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMgB;oBAAgBf,SAAS;gBAAU;YAClE,EAAE,OAAOC,OAAO;gBACdP,KAAKO;YACP;QACF;;AACF;MAEA,WAAeZ"}