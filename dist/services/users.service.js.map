{"version":3,"sources":["../../src/services/users.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\nimport { LoginUserDto } from '@dtos/users.dto';\nimport { HttpException } from '@exceptions/HttpException';\nimport { User } from '@interfaces/users.interface';\nimport userModel from '@models/users.model';\nimport { isEmpty } from '@utils/util';\n\nclass UserService {\n  public users = userModel;\n\n  public async findAllUser(): Promise<User[]> {\n    const users: User[] = await this.users.find();\n    return users;\n  }\n\n  public async findUserById(userId: string): Promise<User> {\n    if (isEmpty(userId)) throw new HttpException(400, 'UserId is empty');\n\n    const findUser: User = await this.users.findOne({ _id: userId });\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    return findUser;\n  }\n\n  public async createUser(userData: LoginUserDto): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n\n    const findUser: User = await this.users.findOne({ email: userData.email });\n    if (findUser) throw new HttpException(409, `This email ${userData.email} already exists`);\n\n    const hashedPassword = await hash(userData.password, 10);\n    const createUserData: User = await this.users.create({ ...userData, password: hashedPassword });\n\n    return createUserData;\n  }\n\n  public async updateUser(userId: string, userData: LoginUserDto): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n\n    if (userData.email) {\n      const findUser: User = await this.users.findOne({ email: userData.email });\n      if (findUser && findUser._id != userId) throw new HttpException(409, `This email ${userData.email} already exists`);\n    }\n\n    if (userData.password) {\n      const hashedPassword = await hash(userData.password, 10);\n      userData = { ...userData, password: hashedPassword };\n    }\n\n    const updateUserById: User = await this.users.findByIdAndUpdate(userId, { userData });\n    if (!updateUserById) throw new HttpException(409, \"User doesn't exist\");\n\n    return updateUserById;\n  }\n\n  public async deleteUser(userId: string): Promise<User> {\n    const deleteUserById: User = await this.users.findByIdAndDelete(userId);\n    if (!deleteUserById) throw new HttpException(409, \"User doesn't exist\");\n\n    return deleteUserById;\n  }\n}\n\nexport default UserService;\n"],"names":["UserService","findAllUser","users","find","findUserById","userId","isEmpty","HttpException","findUser","findOne","_id","createUser","userData","email","hashedPassword","hash","password","createUserData","create","updateUser","updateUserById","findByIdAndUpdate","deleteUser","deleteUserById","findByIdAndDelete","userModel"],"mappings":";;;;+BA+DA;;aAAA;;wBA/DqB;+BAES;mDAER;sBACE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAExB,IAAA,AAAMA,cAAN,MAAMA;IAGJ,MAAaC,cAA+B;QAC1C,MAAMC,QAAgB,MAAM,IAAI,CAACA,KAAK,CAACC,IAAI;QAC3C,OAAOD;IACT;IAEA,MAAaE,aAAaC,MAAc,EAAiB;QACvD,IAAIC,IAAAA,aAAO,EAACD,SAAS,MAAM,IAAIE,4BAAa,CAAC,KAAK,mBAAmB;QAErE,MAAMC,WAAiB,MAAM,IAAI,CAACN,KAAK,CAACO,OAAO,CAAC;YAAEC,KAAKL;QAAO;QAC9D,IAAI,CAACG,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK,sBAAsB;QAElE,OAAOC;IACT;IAEA,MAAaG,WAAWC,QAAsB,EAAiB;QAC7D,IAAIN,IAAAA,aAAO,EAACM,WAAW,MAAM,IAAIL,4BAAa,CAAC,KAAK,qBAAqB;QAEzE,MAAMC,WAAiB,MAAM,IAAI,CAACN,KAAK,CAACO,OAAO,CAAC;YAAEI,OAAOD,SAASC,KAAK;QAAC;QACxE,IAAIL,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK,CAAC,WAAW,EAAEK,SAASC,KAAK,CAAC,eAAe,CAAC,EAAE;QAE1F,MAAMC,iBAAiB,MAAMC,IAAAA,YAAI,EAACH,SAASI,QAAQ,EAAE;QACrD,MAAMC,iBAAuB,MAAM,IAAI,CAACf,KAAK,CAACgB,MAAM,CAAC,qCAAKN;YAAUI,UAAUF;;QAE9E,OAAOG;IACT;IAEA,MAAaE,WAAWd,MAAc,EAAEO,QAAsB,EAAiB;QAC7E,IAAIN,IAAAA,aAAO,EAACM,WAAW,MAAM,IAAIL,4BAAa,CAAC,KAAK,qBAAqB;QAEzE,IAAIK,SAASC,KAAK,EAAE;YAClB,MAAML,WAAiB,MAAM,IAAI,CAACN,KAAK,CAACO,OAAO,CAAC;gBAAEI,OAAOD,SAASC,KAAK;YAAC;YACxE,IAAIL,YAAYA,SAASE,GAAG,IAAIL,QAAQ,MAAM,IAAIE,4BAAa,CAAC,KAAK,CAAC,WAAW,EAAEK,SAASC,KAAK,CAAC,eAAe,CAAC,EAAE;QACtH,CAAC;QAED,IAAID,SAASI,QAAQ,EAAE;YACrB,MAAMF,iBAAiB,MAAMC,IAAAA,YAAI,EAACH,SAASI,QAAQ,EAAE;YACrDJ,WAAW,qCAAKA;gBAAUI,UAAUF;;QACtC,CAAC;QAED,MAAMM,iBAAuB,MAAM,IAAI,CAAClB,KAAK,CAACmB,iBAAiB,CAAChB,QAAQ;YAAEO;QAAS;QACnF,IAAI,CAACQ,gBAAgB,MAAM,IAAIb,4BAAa,CAAC,KAAK,sBAAsB;QAExE,OAAOa;IACT;IAEA,MAAaE,WAAWjB,MAAc,EAAiB;QACrD,MAAMkB,iBAAuB,MAAM,IAAI,CAACrB,KAAK,CAACsB,iBAAiB,CAACnB;QAChE,IAAI,CAACkB,gBAAgB,MAAM,IAAIhB,4BAAa,CAAC,KAAK,sBAAsB;QAExE,OAAOgB;IACT;;aApDOrB,QAAQuB,mBAAS;;AAqD1B;MAEA,WAAezB"}